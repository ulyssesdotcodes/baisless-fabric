%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &114340500867371532
MonoBehaviour:
  m_ObjectHideFlags: 1
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: d01270efd3285ea4a9d6c555cb0a8027, type: 3}
  m_Name: VFXUI
  m_EditorClassIdentifier: 
  groupInfos: []
  stickyNoteInfos: []
  systemInfos: []
  categories: []
  uiBounds:
    serializedVersion: 2
    x: 29
    y: -379
    width: 1056
    height: 2588
--- !u!114 &114350483966674976
MonoBehaviour:
  m_ObjectHideFlags: 1
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 7d4c867f6b72b714dbb5fd1780afe208, type: 3}
  m_Name: AgentCollision
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 0}
  m_Children:
  - {fileID: 8926484042661614688}
  m_UIPosition: {x: 0, y: 0}
  m_UICollapsed: 1
  m_UISuperCollapsed: 0
  m_UIInfos: {fileID: 114340500867371532}
  m_ParameterInfo: []
  m_GraphVersion: 2
  m_saved: 1
  m_SubgraphDependencies:
  - {fileID: 8926484042661614526, guid: a28fabd60e9f51840bb363516a0e7e88, type: 3}
  m_CategoryPath: 
--- !u!2058629511 &8926484042661614527
VisualEffectResource:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_Name: AgentCollision
  m_Graph: {fileID: 114350483966674976}
  m_ShaderSources:
  - compute: 1
    name: '[System 1]Initialize'
    source: "#pragma kernel CSMain\n#define NB_THREADS_PER_GROUP 64\n#define VFX_USE_VELOCITY_CURRENT
      1\n#define VFX_USE_SEED_CURRENT 1\n#define VFX_USE_LIFETIME_CURRENT 1\n#define
      VFX_USE_POSITION_CURRENT 1\n#define VFX_USE_COLOR_CURRENT 1\n#define VFX_USE_PARTICLEID_CURRENT
      1\n#define VFX_USE_SIZE_CURRENT 1\n#define VFX_USE_AGE_CURRENT 1\n#define VFX_USE_ANGLEX_CURRENT
      1\n#define VFX_USE_ANGLEY_CURRENT 1\n#define VFX_USE_ANGLEZ_CURRENT 1\n#define
      VFX_USE_ALIVE_CURRENT 1\n#define VFX_USE_VELOCITY_SOURCE 1\n#define VFX_USE_POSITION_SOURCE
      1\n#define VFX_USE_COLOR_SOURCE 1\n#define VFX_LOCAL_SPACE 1\n#include \"Packages/com.unity.visualeffectgraph/Shaders/RenderPipeline/HDRP/VFXDefines.hlsl\"\n\n\nCBUFFER_START(parameters)\n
      \   float3 Min_a;\n    float uniform_d;\n    float3 Max_a;\n    float uniform_e;\n
      \   float uniform_f;\n    uint3 PADDING_0;\nCBUFFER_END\n\n\n#include \"Packages/com.unity.visualeffectgraph/Shaders/Common/VFXCommonCompute.cginc\"\n#include
      \"Packages/com.unity.visualeffectgraph/Shaders/VFXCommon.cginc\"\n\n\n\nRWByteAddressBuffer
      attributeBuffer;\nByteAddressBuffer sourceAttributeBuffer;\n\nCBUFFER_START(initParams)\n#if
      !VFX_USE_SPAWNER_FROM_GPU\n    uint nbSpawned;\t\t\t\t\t// Numbers of particle
      spawned\n    uint spawnIndex;\t\t\t\t// Index of the first particle spawned\n
      \   uint dispatchWidth;\n#else\n    uint offsetInAdditionalOutput;\n\tuint nbMax;\n#endif\n\tuint
      systemSeed;\nCBUFFER_END\n\n#if VFX_USE_ALIVE_CURRENT\nRWStructuredBuffer<uint>
      deadListIn;\nByteAddressBuffer deadListCount; // This is bad to use a SRV to
      fetch deadList count but Unity API currently prevent from copying to CB\n#endif\n\n#if
      VFX_USE_SPAWNER_FROM_GPU\nStructuredBuffer<uint> eventList;\nByteAddressBuffer
      inputAdditional;\n#endif\n\nvoid SetAttribute_E6295C0(inout float3 velocity,
      inout uint seed, float3 Min, float3 Max) /*attribute:velocity Composition:Overwrite
      Source:Slot Random:PerComponent channels:XYZ */\n{\n    velocity = lerp(Min,Max,RAND3);\n}\nvoid
      SetAttribute_F01429A3(inout float lifetime, inout uint seed, float Min, float
      Max) /*attribute:lifetime Composition:Overwrite Source:Slot Random:Uniform channels:XYZ
      */\n{\n    lifetime = lerp(Min,Max,RAND);\n}\nvoid SetAttribute_CAC02F9E(inout
      float3 position, float3 Value) /*attribute:position Composition:Overwrite Source:Source
      Random:Off channels:XYZ */\n{\n    position = Value;\n}\nvoid SetAttribute_FDCE071E(inout
      float3 color, float3 Value) /*attribute:color Composition:Overwrite Source:Source
      Random:Off channels:XYZ */\n{\n    color = Value;\n}\nvoid SetAttribute_FA15ADAA(inout
      float3 color, float3 Color) /*attribute:color Composition:Add Source:Slot Random:Off
      channels:XYZ */\n{\n    color += Color;\n}\nvoid SetAttribute_AAA3DE1(inout
      float3 velocity, float3 Value) /*attribute:velocity Composition:Add Source:Source
      Random:Off channels:XYZ */\n{\n    velocity += Value;\n}\n\n\n\n[numthreads(NB_THREADS_PER_GROUP,1,1)]\nvoid
      CSMain(uint3 groupId          : SV_GroupID,\n            uint3 groupThreadId
      \   : SV_GroupThreadID)\n{\n    uint id = groupThreadId.x + groupId.x * NB_THREADS_PER_GROUP;\n#if
      !VFX_USE_SPAWNER_FROM_GPU\n    id += groupId.y * dispatchWidth * NB_THREADS_PER_GROUP;\n#endif\n\n#if
      VFX_USE_SPAWNER_FROM_GPU\n    uint maxThreadId = inputAdditional.Load((offsetInAdditionalOutput
      * 2 + 0) << 2);\n    uint currentSpawnIndex = inputAdditional.Load((offsetInAdditionalOutput
      * 2 + 1) << 2) - maxThreadId;\n#else\n    uint maxThreadId = nbSpawned;\n    uint
      currentSpawnIndex = spawnIndex;\n#endif\n\n#if VFX_USE_ALIVE_CURRENT\n    maxThreadId
      = min(maxThreadId, deadListCount.Load(0x0));\n#elif VFX_USE_SPAWNER_FROM_GPU\n
      \   maxThreadId = min(maxThreadId, nbMax); //otherwise, nbSpawned already clamped
      on CPU\n#endif\n\n    if (id < maxThreadId)\n    {\n#if VFX_USE_SPAWNER_FROM_GPU\n
      \       int sourceIndex = eventList[id];\n#endif\n        uint particleIndex
      = id + currentSpawnIndex;\n\t\t\n#if !VFX_USE_SPAWNER_FROM_GPU\n        int
      sourceIndex = 0;\n        /*//Loop with 1 iteration generate a wrong IL Assembly
      (and actually, useless code)\n        uint currentSumSpawnCount = 0u;\n        for
      (sourceIndex=0; sourceIndex<1; sourceIndex++)\n        {\n            currentSumSpawnCount
      += uint(asfloat(sourceAttributeBuffer.Load((sourceIndex * 0xC + 0x3) << 2)));\n
      \           if (id < currentSumSpawnCount)\n            {\n                break;\n
      \           }\n        }\n        */\n        \n\n#endif\n        float3 velocity
      = float3(0,0,0);\n        uint seed = (uint)0;\n        float lifetime = (float)1;\n
      \       float3 position = float3(0,0,0);\n        float3 color = float3(1,1,1);\n
      \       uint particleId = (uint)0;\n        float size = (float)0.1;\n        float
      age = (float)0;\n        float angleX = (float)0;\n        float angleY = (float)0;\n
      \       float angleZ = (float)0;\n        bool alive = (bool)true;\n        float3
      velocity_source = asfloat(sourceAttributeBuffer.Load3((sourceIndex * 0xC + 0x0)
      << 2));\n        float3 position_source = asfloat(sourceAttributeBuffer.Load3((sourceIndex
      * 0xC + 0x4) << 2));\n        float3 color_source = asfloat(sourceAttributeBuffer.Load3((sourceIndex
      * 0xC + 0x8) << 2));\n        \n\n#if VFX_USE_PARTICLEID_CURRENT\n         particleId
      = particleIndex;\n#endif\n#if VFX_USE_SEED_CURRENT\n        seed = WangHash(particleIndex
      ^ systemSeed);\n#endif\n        \n        SetAttribute_E6295C0( /*inout */velocity,
      \ /*inout */seed, Min_a, Max_a);\n        {\n            SetAttribute_F01429A3(
      /*inout */lifetime,  /*inout */seed, (float)0.1, (float)0.8);\n        }\n        {\n
      \           float3 tmp_bc = position_source;\n            SetAttribute_CAC02F9E(
      /*inout */position, tmp_bc);\n        }\n        {\n            float3 tmp_bc
      = color_source;\n            SetAttribute_FDCE071E( /*inout */color, tmp_bc);\n
      \       }\n        {\n            uint tmp_bd = particleId ^ asuint(uniform_d);\n
      \           float tmp_be = FixedRand(tmp_bd);\n            float tmp_bg = tmp_be
      * (float)0.4;\n            float tmp_bh = (float)-0.2 + tmp_bg;\n            uint
      tmp_bi = particleId ^ asuint(uniform_e);\n            float tmp_bj = FixedRand(tmp_bi);\n
      \           float tmp_bk = tmp_bj * (float)0.4;\n            float tmp_bl =
      (float)-0.2 + tmp_bk;\n            uint tmp_bm = particleId ^ asuint(uniform_f);\n
      \           float tmp_bn = FixedRand(tmp_bm);\n            float tmp_bo = tmp_bn
      * (float)0.4;\n            float tmp_bp = (float)-0.2 + tmp_bo;\n            float3
      tmp_bq = float3(tmp_bh, tmp_bl, tmp_bp);\n            SetAttribute_FA15ADAA(
      /*inout */color, tmp_bq);\n        }\n        {\n            float3 tmp_bc =
      velocity_source;\n            SetAttribute_AAA3DE1( /*inout */velocity, tmp_bc);\n
      \       }\n        \n\n\n#if VFX_USE_ALIVE_CURRENT\n        if (alive)\n        {\n\t\t\tuint
      deadIndex = deadListIn.DecrementCounter();\n            uint index = deadListIn[deadIndex];\n
      \           attributeBuffer.Store3((index * 0xC + 0x0) << 2,asuint(velocity));\n
      \           attributeBuffer.Store((index * 0x1 + 0x600) << 2,asuint(seed));\n
      \           attributeBuffer.Store((index * 0x1 + 0x680) << 2,asuint(lifetime));\n
      \           attributeBuffer.Store3((index * 0xC + 0x4) << 2,asuint(position));\n
      \           attributeBuffer.Store3((index * 0x4 + 0x700) << 2,asuint(color));\n
      \           attributeBuffer.Store((index * 0x1 + 0x900) << 2,asuint(size));\n
      \           attributeBuffer.Store((index * 0xC + 0x3) << 2,asuint(age));\n            attributeBuffer.Store((index
      * 0xC + 0x7) << 2,asuint(angleX));\n            attributeBuffer.Store((index
      * 0xC + 0x8) << 2,asuint(angleY));\n            attributeBuffer.Store((index
      * 0xC + 0x9) << 2,asuint(angleZ));\n            attributeBuffer.Store((index
      * 0xC + 0xA) << 2,uint(alive));\n            \n\n        }\n#else\n        uint
      index = particleIndex;\n        attributeBuffer.Store3((index * 0xC + 0x0) <<
      2,asuint(velocity));\n        attributeBuffer.Store((index * 0x1 + 0x600) <<
      2,asuint(seed));\n        attributeBuffer.Store((index * 0x1 + 0x680) << 2,asuint(lifetime));\n
      \       attributeBuffer.Store3((index * 0xC + 0x4) << 2,asuint(position));\n
      \       attributeBuffer.Store3((index * 0x4 + 0x700) << 2,asuint(color));\n
      \       attributeBuffer.Store((index * 0x1 + 0x900) << 2,asuint(size));\n        attributeBuffer.Store((index
      * 0xC + 0x3) << 2,asuint(age));\n        attributeBuffer.Store((index * 0xC
      + 0x7) << 2,asuint(angleX));\n        attributeBuffer.Store((index * 0xC + 0x8)
      << 2,asuint(angleY));\n        attributeBuffer.Store((index * 0xC + 0x9) <<
      2,asuint(angleZ));\n        attributeBuffer.Store((index * 0xC + 0xA) << 2,uint(alive));\n
      \       \n\n#endif\n    }\n}\n"
  - compute: 1
    name: '[System 1]Update'
    source: "#pragma kernel CSMain\n#define NB_THREADS_PER_GROUP 64\n#define VFX_USE_VELOCITY_CURRENT
      1\n#define VFX_USE_SEED_CURRENT 1\n#define VFX_USE_LIFETIME_CURRENT 1\n#define
      VFX_USE_POSITION_CURRENT 1\n#define VFX_USE_MASS_CURRENT 1\n#define VFX_USE_SIZE_CURRENT
      1\n#define VFX_USE_AGE_CURRENT 1\n#define VFX_USE_ANGLEX_CURRENT 1\n#define
      VFX_USE_ANGLEY_CURRENT 1\n#define VFX_USE_ANGLEZ_CURRENT 1\n#define VFX_USE_ALIVE_CURRENT
      1\n#define VFX_LOCAL_SPACE 1\n#include \"Packages/com.unity.visualeffectgraph/Shaders/RenderPipeline/HDRP/VFXDefines.hlsl\"\n\n\nCBUFFER_START(parameters)\n
      \   float4 Size_b;\n    float4 Angle_x_c;\n    float4 Angle_y_c;\n    float4
      Angle_z_c;\n    float deltaTime_a;\n    uint3 PADDING_0;\nCBUFFER_END\n\n\n#include
      \"Packages/com.unity.visualeffectgraph/Shaders/Common/VFXCommonCompute.cginc\"\n#include
      \"Packages/com.unity.visualeffectgraph/Shaders/VFXCommon.cginc\"\n\n\n\nRWByteAddressBuffer
      attributeBuffer;\n\n#if VFX_USE_ALIVE_CURRENT\nRWStructuredBuffer<uint> deadListOut;\n#endif\n\n#if
      VFX_HAS_INDIRECT_DRAW\nRWStructuredBuffer<uint> indirectBuffer;\n#endif\n\nCBUFFER_START(updateParams)\n
      \   uint nbMax;\n\tuint dispatchWidth;\n\tuint systemSeed;\nCBUFFER_END\n\nvoid
      Turbulence_1(float3 position, inout float3 velocity, float mass, float4x4 InvFieldTransform,
      float4x4 FieldTransform, float Roughness, float Intensity, float Drag, uint
      octaves, float deltaTime) /*Mode:Relative */\n{\n    float3 vectorFieldCoord
      = mul(InvFieldTransform, float4(position,1.0f)).xyz;\n    \n    float3 value
      = Noise3D(vectorFieldCoord + 0.5f, octaves, Roughness);\n    value = mul(FieldTransform,float4(value,0.0f)).xyz
      * Intensity;\n    \n    velocity += (value - velocity) * min(1.0f,Drag * deltaTime
      / mass);\n}\nvoid AttributeFromCurve_45ABB90F(inout float size, float age, float
      lifetime, float4 Size) /*attribute:size Composition:Overwrite AlphaComposition:Overwrite
      SampleMode:OverLife Mode:PerComponent ColorMode:ColorAndAlpha channels:X */\n{\n
      \   float t = age / lifetime;\n    float value = 0.0f;\n    value = SampleCurve(Size,
      t);\n    size = value;\n}\nvoid AttributeFromCurve_DDDA3CB6(inout float angleX,
      inout float angleY, inout float angleZ, inout uint seed, float4 Angle_x, float4
      Angle_y, float4 Angle_z) /*attribute:angle Composition:Add AlphaComposition:Overwrite
      SampleMode:Random Mode:PerComponent ColorMode:ColorAndAlpha channels:XYZ */\n{\n
      \   float t = RAND;\n    float3 value = 0.0f;\n    value[0] = SampleCurve(Angle_x,
      t);\n    value[1] = SampleCurve(Angle_y, t);\n    value[2] = SampleCurve(Angle_z,
      t);\n    angleX += value.x;\n    angleY += value.y;\n    angleZ += value.z;\n}\nvoid
      EulerIntegration(inout float3 position, float3 velocity, float deltaTime)\n{\n
      \   position += velocity * deltaTime;\n}\nvoid Age(inout float age, float deltaTime)\n{\n
      \   age += deltaTime;\n}\nvoid Reap(float age, float lifetime, inout bool alive)\n{\n
      \   if(age > lifetime) { alive = false; }\n}\n\n\n\n[numthreads(NB_THREADS_PER_GROUP,1,1)]\nvoid
      CSMain(uint3 groupId          : SV_GroupID,\n            uint3 groupThreadId
      \   : SV_GroupThreadID)\n{\n\tuint id = groupThreadId.x + groupId.x * NB_THREADS_PER_GROUP
      + groupId.y * dispatchWidth * NB_THREADS_PER_GROUP;\n\tuint index = id;\n\tif
      (id < nbMax)\n\t{\n#if VFX_USE_ALIVE_CURRENT\n\t\tbool alive = (attributeBuffer.Load((index
      * 0xC + 0xA) << 2));\n\t\t\n\n\t\tif (alive)\n\t\t{\n\t\t\tfloat3 velocity =
      asfloat(attributeBuffer.Load3((index * 0xC + 0x0) << 2));\n\t\t\tuint seed =
      (attributeBuffer.Load((index * 0x1 + 0x600) << 2));\n\t\t\tfloat lifetime =
      asfloat(attributeBuffer.Load((index * 0x1 + 0x680) << 2));\n\t\t\tfloat3 position
      = asfloat(attributeBuffer.Load3((index * 0xC + 0x4) << 2));\n\t\t\tfloat mass
      = (float)1;\n\t\t\tfloat size = asfloat(attributeBuffer.Load((index * 0x1 +
      0x900) << 2));\n\t\t\tfloat age = asfloat(attributeBuffer.Load((index * 0xC
      + 0x3) << 2));\n\t\t\tfloat angleX = asfloat(attributeBuffer.Load((index * 0xC
      + 0x7) << 2));\n\t\t\tfloat angleY = asfloat(attributeBuffer.Load((index * 0xC
      + 0x8) << 2));\n\t\t\tfloat angleZ = asfloat(attributeBuffer.Load((index * 0xC
      + 0x9) << 2));\n\t\t\tfloat3 velocity_source = velocity;\n\t\t\tfloat3 position_source
      = position;\n\t\t\tfloat3 color_source = float3(1,1,1);\n\t\t\t\n\n\t\t\t\n#if
      VFX_USE_OLDPOSITION_CURRENT\n\t\t\toldPosition = position;\n#endif\n\t\t\t\n\t\t\t{\n\t\t\t
      \   Turbulence_1(position,  /*inout */velocity, mass, float4x4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),
      float4x4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1), (float)0.5, (float)1, (float)1, (uint)3,
      deltaTime_a);\n\t\t\t}\n\t\t\tAttributeFromCurve_45ABB90F( /*inout */size, age,
      lifetime, Size_b);\n\t\t\tAttributeFromCurve_DDDA3CB6( /*inout */angleX,  /*inout
      */angleY,  /*inout */angleZ,  /*inout */seed, Angle_x_c, Angle_y_c, Angle_z_c);\n\t\t\tEulerIntegration(
      /*inout */position, velocity, deltaTime_a);\n\t\t\tAge( /*inout */age, deltaTime_a);\n\t\t\tReap(age,
      lifetime,  /*inout */alive);\n\t\t\t\n\n\t\t\tif (alive)\n\t\t\t{\n\t\t\t\tattributeBuffer.Store3((index
      * 0xC + 0x0) << 2,asuint(velocity));\n\t\t\t\tattributeBuffer.Store((index *
      0x1 + 0x600) << 2,asuint(seed));\n\t\t\t\tattributeBuffer.Store3((index * 0xC
      + 0x4) << 2,asuint(position));\n\t\t\t\tattributeBuffer.Store((index * 0x1 +
      0x900) << 2,asuint(size));\n\t\t\t\tattributeBuffer.Store((index * 0xC + 0x3)
      << 2,asuint(age));\n\t\t\t\tattributeBuffer.Store((index * 0xC + 0x7) << 2,asuint(angleX));\n\t\t\t\tattributeBuffer.Store((index
      * 0xC + 0x8) << 2,asuint(angleY));\n\t\t\t\tattributeBuffer.Store((index * 0xC
      + 0x9) << 2,asuint(angleZ));\n\t\t\t\t\n\n#if VFX_HAS_INDIRECT_DRAW\n                uint
      indirectIndex = indirectBuffer.IncrementCounter();\n\t\t\t\tindirectBuffer[indirectIndex]
      = index;\n#endif\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tattributeBuffer.Store((index
      * 0xC + 0xA) << 2,uint(alive));\n\t\t\t\t\n\n\t\t\t\tuint deadIndex = deadListOut.IncrementCounter();\n\t\t\t\tdeadListOut[deadIndex]
      = index;\n\t\t\t}\n\t\t}\n#else\n\t\tfloat3 velocity = asfloat(attributeBuffer.Load3((index
      * 0xC + 0x0) << 2));\n\t\tuint seed = (attributeBuffer.Load((index * 0x1 + 0x600)
      << 2));\n\t\tfloat lifetime = asfloat(attributeBuffer.Load((index * 0x1 + 0x680)
      << 2));\n\t\tfloat3 position = asfloat(attributeBuffer.Load3((index * 0xC +
      0x4) << 2));\n\t\tfloat mass = (float)1;\n\t\tfloat size = asfloat(attributeBuffer.Load((index
      * 0x1 + 0x900) << 2));\n\t\tfloat age = asfloat(attributeBuffer.Load((index
      * 0xC + 0x3) << 2));\n\t\tfloat angleX = asfloat(attributeBuffer.Load((index
      * 0xC + 0x7) << 2));\n\t\tfloat angleY = asfloat(attributeBuffer.Load((index
      * 0xC + 0x8) << 2));\n\t\tfloat angleZ = asfloat(attributeBuffer.Load((index
      * 0xC + 0x9) << 2));\n\t\tbool alive = (attributeBuffer.Load((index * 0xC +
      0xA) << 2));\n\t\tfloat3 velocity_source = velocity;\n\t\tfloat3 position_source
      = position;\n\t\tfloat3 color_source = float3(1,1,1);\n\t\t\n\n\t\t\n#if VFX_USE_OLDPOSITION_CURRENT\n\t\toldPosition
      = position;\n#endif\n\t\t\n\t\t{\n\t\t    Turbulence_1(position,  /*inout */velocity,
      mass, float4x4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1), float4x4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),
      (float)0.5, (float)1, (float)1, (uint)3, deltaTime_a);\n\t\t}\n\t\tAttributeFromCurve_45ABB90F(
      /*inout */size, age, lifetime, Size_b);\n\t\tAttributeFromCurve_DDDA3CB6( /*inout
      */angleX,  /*inout */angleY,  /*inout */angleZ,  /*inout */seed, Angle_x_c,
      Angle_y_c, Angle_z_c);\n\t\tEulerIntegration( /*inout */position, velocity,
      deltaTime_a);\n\t\tAge( /*inout */age, deltaTime_a);\n\t\tReap(age, lifetime,
      \ /*inout */alive);\n\t\t\n\n\t\tattributeBuffer.Store3((index * 0xC + 0x0)
      << 2,asuint(velocity));\n\t\tattributeBuffer.Store((index * 0x1 + 0x600) <<
      2,asuint(seed));\n\t\tattributeBuffer.Store3((index * 0xC + 0x4) << 2,asuint(position));\n\t\tattributeBuffer.Store((index
      * 0x1 + 0x900) << 2,asuint(size));\n\t\tattributeBuffer.Store((index * 0xC +
      0x3) << 2,asuint(age));\n\t\tattributeBuffer.Store((index * 0xC + 0x7) << 2,asuint(angleX));\n\t\tattributeBuffer.Store((index
      * 0xC + 0x8) << 2,asuint(angleY));\n\t\tattributeBuffer.Store((index * 0xC +
      0x9) << 2,asuint(angleZ));\n\t\tattributeBuffer.Store((index * 0xC + 0xA) <<
      2,uint(alive));\n\t\t\n\n#if VFX_HAS_INDIRECT_DRAW\n        uint indirectIndex
      = indirectBuffer.IncrementCounter();\n\t\tindirectBuffer[indirectIndex] = index;\n#endif\n#endif\n\t}\n}\n"
  - compute: 0
    name: '[System 1]Cube Output'
    source: "Shader \"Hidden/VFX/System 1/Cube Output\"\n{\n\tSubShader\n\t{\t\n\t\tCull
      Back\n\t\t\n\t\tTags { \"Queue\"=\"Transparent+0\" \"IgnoreProjector\"=\"True\"
      \"RenderType\"=\"Transparent\" }\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\tBlend
      SrcAlpha One \n\t\tZTest LEqual\n\t\tZWrite Off\n\t\tCull Back\n\t\t\n\t\n\t\t\t\n\t\tHLSLINCLUDE\n\t\t#if
      !defined(VFX_WORLD_SPACE) && !defined(VFX_LOCAL_SPACE)\n\t\t#define VFX_LOCAL_SPACE
      1\n\t\t#endif\n\t\t\n\t\t#define NB_THREADS_PER_GROUP 64\n\t\t#define VFX_USE_VELOCITY_CURRENT
      1\n\t\t#define VFX_USE_LIFETIME_CURRENT 1\n\t\t#define VFX_USE_POSITION_CURRENT
      1\n\t\t#define VFX_USE_COLOR_CURRENT 1\n\t\t#define VFX_USE_SIZE_CURRENT 1\n\t\t#define
      VFX_USE_AGE_CURRENT 1\n\t\t#define VFX_USE_ANGLEX_CURRENT 1\n\t\t#define VFX_USE_ANGLEY_CURRENT
      1\n\t\t#define VFX_USE_ANGLEZ_CURRENT 1\n\t\t#define VFX_USE_ALPHA_CURRENT 1\n\t\t#define
      VFX_USE_ALIVE_CURRENT 1\n\t\t#define VFX_USE_AXISX_CURRENT 1\n\t\t#define VFX_USE_AXISY_CURRENT
      1\n\t\t#define VFX_USE_AXISZ_CURRENT 1\n\t\t#define VFX_USE_PIVOTX_CURRENT 1\n\t\t#define
      VFX_USE_PIVOTY_CURRENT 1\n\t\t#define VFX_USE_PIVOTZ_CURRENT 1\n\t\t#define
      VFX_USE_SCALEX_CURRENT 1\n\t\t#define VFX_USE_SCALEY_CURRENT 1\n\t\t#define
      VFX_USE_SCALEZ_CURRENT 1\n\t\t#define VFX_COLORMAPPING_DEFAULT 1\n\t\t#define
      IS_TRANSPARENT_PARTICLE 1\n\t\t#define USE_SOFT_PARTICLE 1\n\t\t#define VFX_BLENDMODE_ADD
      1\n\t\t\n\t\t\n\t\t\n\t\t#define VFX_LOCAL_SPACE 1\n\t\t#include \"Packages/com.unity.visualeffectgraph/Shaders/RenderPipeline/HDRP/VFXDefines.hlsl\"\n\t\t\n\n\t\tCBUFFER_START(parameters)\n\t\t
      \   float gradient_b;\n\t\t    uint3 PADDING_0;\n\t\tCBUFFER_END\n\t\tTexture2D
      mainTexture;\n\t\tSamplerState samplermainTexture;\n\t\t\n\n\t\t\n\t\t#define
      VFX_NEEDS_COLOR_INTERPOLATOR (VFX_USE_COLOR_CURRENT || VFX_USE_ALPHA_CURRENT)\n\t\t\n\t\tByteAddressBuffer
      attributeBuffer;\t\n\t\t\n\t\t#if VFX_HAS_INDIRECT_DRAW\n\t\tStructuredBuffer<uint>
      indirectBuffer;\t\n\t\t#endif\t\n\t\t\n\t\t#if USE_DEAD_LIST_COUNT\n\t\tByteAddressBuffer
      deadListCount;\n\t\t#endif\n\t\t\n\t\tCBUFFER_START(outputParams)\n\t\t\tfloat
      nbMax;\n\t\t\tfloat systemSeed;\n\t\tCBUFFER_END\n\t\t\n\t\tENDHLSL\n\t\t\n\n\t\t\n\t\t//
      Forward pass\n\t\tPass\n\t\t{\t\t\n\t\t\tTags { \"LightMode\"=\"ForwardOnly\"
      }\n\t\t\t\n\t\t\tHLSLPROGRAM\n\t\t\t#pragma target 4.5\n\t\t\t\n\t\t\t\n\t\t\tstruct
      ps_input\n\t\t\t{\n\t\t\t\tfloat4 pos : SV_POSITION;\n\t\t\t\tfloat3 offsets
      : TEXCOORD0;\n\t\t\t\t#if VFX_NEEDS_COLOR_INTERPOLATOR\n\t\t\t\tnointerpolation
      float4 color : COLOR0;\n\t\t\t\t#endif\n\t\t\t\t#if USE_SOFT_PARTICLE || USE_ALPHA_TEST\n\t\t\t\t//
      x: inverse soft particles fade distance\n\t\t\t\t// y: alpha threshold\n\t\t\t\tnointerpolation
      float2 builtInInterpolants : TEXCOORD1;\n\t\t\t\t#endif\n\t\t\t\tnointerpolation
      uint faceID : TEXCOORD2;\n\t\t\t\t#if VFX_NEEDS_POSWS_INTERPOLATOR\n\t\t\t\tfloat3
      posWS : TEXCOORD3;\n\t\t\t\t#endif\n\t\t\t};\n\t\t\t\n\t\t\tstruct ps_output\n\t\t\t{\n\t\t\t\tfloat4
      color : SV_Target0;\n\t\t\t};\n\t\t\n\t\t#define VFX_VARYING_PS_INPUTS ps_input\n\t\t#define
      VFX_VARYING_POSCS pos\n\t\t#define VFX_VARYING_COLOR color.rgb\n\t\t#define
      VFX_VARYING_ALPHA color.a\n\t\t#define VFX_VARYING_INVSOFTPARTICLEFADEDISTANCE
      builtInInterpolants.x\n\t\t#define VFX_VARYING_ALPHATHRESHOLD builtInInterpolants.y\n\t\t#define
      VFX_VARYING_OFFSETS offsets\n\t\t#define VFX_VARYING_FACEID faceID\n\t\t#if
      VFX_NEEDS_POSWS_INTERPOLATOR\n\t\t#define VFX_VARYING_POSWS posWS\n\t\t#endif\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t#if
      !(defined(VFX_VARYING_PS_INPUTS) && defined(VFX_VARYING_POSCS))\n\t\t\t#error
      VFX_VARYING_PS_INPUTS, VFX_VARYING_POSCS must be defined.\n\t\t\t#endif\n\t\t\t\n\t\t\t#include
      \"Packages/com.unity.visualeffectgraph/Shaders/RenderPipeline/HDRP/VFXCommon.cginc\"\n\t\t\t#include
      \"Packages/com.unity.visualeffectgraph/Shaders/VFXCommon.cginc\"\n\t\t\t\n\n\t\t\tvoid
      Orient_6(inout float3 axisX, inout float3 axisY, inout float3 axisZ, float3
      position, float3 velocity) /*mode:AlongVelocity */\n\t\t\t{\n\t\t\t    \n\t\t\t
      \   axisY = normalize(velocity);\n\t\t\t    axisZ = position - GetViewVFXPosition();\n\t\t\t
      \   axisX = normalize(cross(axisY,axisZ));\n\t\t\t    axisZ = cross(axisX,axisY);\n\t\t\t
      \   \n\t\t\t}\n\t\t\tvoid ColorOverLife_4CC3A(float age, float lifetime, inout
      float alpha, float gradient) /*mode:Alpha ColorComposition:Multiply AlphaComposition:Multiply
      */\n\t\t\t{\n\t\t\t    \n\t\t\t    float4 sampledColor = SampleGradient(gradient,
      age/lifetime);\n\t\t\t    alpha *= sampledColor.a;\n\t\t\t    \n\t\t\t}\n\t\t\tvoid
      SetAttribute_39EE3455(inout float size, float Size) /*attribute:size Composition:Multiply
      Source:Slot Random:Off channels:XYZ */\n\t\t\t{\n\t\t\t    size *= Size;\n\t\t\t}\n\t\t\t\n\n\t\t\t\n\t\t\t#pragma
      vertex vert\n\t\t\tVFX_VARYING_PS_INPUTS vert(uint id : SV_VertexID, uint instanceID
      : SV_InstanceID)\n\t\t\t{\n\t\t\t\tuint index = (id >> 3) + instanceID * 1024;\n\t\t\t\tVFX_VARYING_PS_INPUTS
      o = (VFX_VARYING_PS_INPUTS)0;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\tuint deadCount
      = 0;\n\t\t\t\t\t\t#if USE_DEAD_LIST_COUNT\n\t\t\t\t\t\tdeadCount = deadListCount.Load(0);\n\t\t\t\t\t\t#endif\t\n\t\t\t\t\t\tif
      (index >= asuint(nbMax) - deadCount)\n\t\t\t\t\t\t#if USE_GEOMETRY_SHADER\n\t\t\t\t\t\t\treturn;
      // cull\n\t\t\t\t\t\t#else\n\t\t\t\t\t\t\treturn o; // cull\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\t\t#if
      VFX_HAS_INDIRECT_DRAW\n\t\t\t\t\t\tindex = indirectBuffer[index];\n\t\t\t\t\t\tfloat3
      velocity = asfloat(attributeBuffer.Load3((index * 0xC + 0x0) << 2));\n\t\t\t\t\t\tfloat
      lifetime = asfloat(attributeBuffer.Load((index * 0x1 + 0x680) << 2));\n\t\t\t\t\t\tfloat3
      position = asfloat(attributeBuffer.Load3((index * 0xC + 0x4) << 2));\n\t\t\t\t\t\tfloat3
      color = asfloat(attributeBuffer.Load3((index * 0x4 + 0x700) << 2));\n\t\t\t\t\t\tfloat
      size = asfloat(attributeBuffer.Load((index * 0x1 + 0x900) << 2));\n\t\t\t\t\t\tfloat
      age = asfloat(attributeBuffer.Load((index * 0xC + 0x3) << 2));\n\t\t\t\t\t\tfloat
      angleX = asfloat(attributeBuffer.Load((index * 0xC + 0x7) << 2));\n\t\t\t\t\t\tfloat
      angleY = asfloat(attributeBuffer.Load((index * 0xC + 0x8) << 2));\n\t\t\t\t\t\tfloat
      angleZ = asfloat(attributeBuffer.Load((index * 0xC + 0x9) << 2));\n\t\t\t\t\t\tfloat
      alpha = (float)1;\n\t\t\t\t\t\tbool alive = (attributeBuffer.Load((index * 0xC
      + 0xA) << 2));\n\t\t\t\t\t\tfloat3 axisX = float3(1,0,0);\n\t\t\t\t\t\tfloat3
      axisY = float3(0,1,0);\n\t\t\t\t\t\tfloat3 axisZ = float3(0,0,1);\n\t\t\t\t\t\tfloat
      pivotX = (float)0;\n\t\t\t\t\t\tfloat pivotY = (float)0;\n\t\t\t\t\t\tfloat
      pivotZ = (float)0;\n\t\t\t\t\t\tfloat scaleX = (float)1;\n\t\t\t\t\t\tfloat
      scaleY = (float)1;\n\t\t\t\t\t\tfloat scaleZ = (float)1;\n\t\t\t\t\t\tfloat3
      velocity_source = velocity;\n\t\t\t\t\t\tfloat3 position_source = position;\n\t\t\t\t\t\tfloat3
      color_source = color;\n\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t#else\n\t\t\t\t\t\tbool
      alive = (attributeBuffer.Load((index * 0xC + 0xA) << 2));\n\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\tif
      (!alive)\n\t\t\t\t\t\t\treturn o;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\tfloat3 velocity
      = asfloat(attributeBuffer.Load3((index * 0xC + 0x0) << 2));\n\t\t\t\t\t\tfloat
      lifetime = asfloat(attributeBuffer.Load((index * 0x1 + 0x680) << 2));\n\t\t\t\t\t\tfloat3
      position = asfloat(attributeBuffer.Load3((index * 0xC + 0x4) << 2));\n\t\t\t\t\t\tfloat3
      color = asfloat(attributeBuffer.Load3((index * 0x4 + 0x700) << 2));\n\t\t\t\t\t\tfloat
      size = asfloat(attributeBuffer.Load((index * 0x1 + 0x900) << 2));\n\t\t\t\t\t\tfloat
      age = asfloat(attributeBuffer.Load((index * 0xC + 0x3) << 2));\n\t\t\t\t\t\tfloat
      angleX = asfloat(attributeBuffer.Load((index * 0xC + 0x7) << 2));\n\t\t\t\t\t\tfloat
      angleY = asfloat(attributeBuffer.Load((index * 0xC + 0x8) << 2));\n\t\t\t\t\t\tfloat
      angleZ = asfloat(attributeBuffer.Load((index * 0xC + 0x9) << 2));\n\t\t\t\t\t\tfloat
      alpha = (float)1;\n\t\t\t\t\t\tfloat3 axisX = float3(1,0,0);\n\t\t\t\t\t\tfloat3
      axisY = float3(0,1,0);\n\t\t\t\t\t\tfloat3 axisZ = float3(0,0,1);\n\t\t\t\t\t\tfloat
      pivotX = (float)0;\n\t\t\t\t\t\tfloat pivotY = (float)0;\n\t\t\t\t\t\tfloat
      pivotZ = (float)0;\n\t\t\t\t\t\tfloat scaleX = (float)1;\n\t\t\t\t\t\tfloat
      scaleY = (float)1;\n\t\t\t\t\t\tfloat scaleZ = (float)1;\n\t\t\t\t\t\tfloat3
      velocity_source = velocity;\n\t\t\t\t\t\tfloat3 position_source = position;\n\t\t\t\t\t\tfloat3
      color_source = color;\n\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\tOrient_6(
      /*inout */axisX,  /*inout */axisY,  /*inout */axisZ, position, velocity);\n\t\t\t\tColorOverLife_4CC3A(age,
      lifetime,  /*inout */alpha, gradient_b);\n\t\t\t\t{\n\t\t\t\t    SetAttribute_39EE3455(
      /*inout */size, (float)0.4);\n\t\t\t\t}\n\t\t\t\t\n\n\t\t\t\t\t\t\n\t\t\t\tif
      (!alive)\n\t\t\t\t\treturn o;\n\t\t\t\t\n\t\t\t\tfloat3 offsets = (float3)0;\n\t\t\t\toffsets.x
      = float(id & 1);\n\t\t\t\toffsets.y = float((id & 3) >> 1);\n\t\t\t\toffsets.z
      = float((id & 7) >> 2);\n\t\t\t\toffsets -= 0.5f;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\tfloat3
      size3 = float3(size,size,size);\n\t\t\t\t\t\t#if VFX_USE_SCALEX_CURRENT\n\t\t\t\t\t\tsize3.x
      *= scaleX;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t#if VFX_USE_SCALEY_CURRENT\n\t\t\t\t\t\tsize3.y
      *= scaleY;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t#if VFX_USE_SCALEZ_CURRENT\n\t\t\t\t\t\tsize3.z
      *= scaleZ;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\tfloat3x3 rot
      = GetEulerMatrix(radians(float3(angleX,angleY,angleZ)));\n\t\t\t\tfloat4x4 elementToVFX
      = GetElementToVFXMatrix(axisX,axisY,axisZ,rot,float3(pivotX,pivotY,pivotZ),size3,position);\n\t\t\t\t\n\t\t\t\tfloat3
      vPos = mul(elementToVFX,float4(offsets,1.0f)).xyz;\n\t\t\t\tfloat3 vPosWS =
      TransformPositionVFXToWorld(vPos);\n\t\t\t\t\n\t\t\t#ifdef VFX_VARYING_POSWS\n\t\t\t\to.VFX_VARYING_POSWS
      = vPosWS;\n\t\t\t#endif\n\t\t\t#ifdef VFX_VARYING_OFFSETS\n\t\t\t\to.VFX_VARYING_OFFSETS
      = offsets * 2.0f;\n\t\t\t#endif\n\t\t\t#ifdef VFX_VARYING_FACEID\n\t\t\t\to.VFX_VARYING_FACEID
      = (id & 7) % 5;\n\t\t\t#endif\n\t\t\t#if defined(VFX_VARYING_ROTX) && defined(VFX_VARYING_ROTY)\n\t\t\t\trot
      = mul(transpose(float3x3(axisX,axisY,axisZ)),rot);\n\t\t\t#ifdef VFX_LOCAL_SPACE
      \n\t\t\t\trot = mul((float3x3)VFXGetObjectToWorldMatrix(),rot);\n\t\t\t#endif\n\t\t\t\to.VFX_VARYING_ROTX
      = rot[0];\n\t\t\t\to.VFX_VARYING_ROTY = rot[1];\n\t\t\t#endif\n\t\t\t\to.VFX_VARYING_POSCS
      = VFXTransformPositionWorldToClip(vPosWS);\n\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t#if
      VFX_USE_COLOR_CURRENT && defined(VFX_VARYING_COLOR)\n\t\t\t\t\t\to.VFX_VARYING_COLOR
      = color;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t#if VFX_USE_ALPHA_CURRENT && defined(VFX_VARYING_ALPHA)
      \n\t\t\t\t\t\to.VFX_VARYING_ALPHA = alpha;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\t\t#ifdef
      VFX_VARYING_EXPOSUREWEIGHT\n\t\t\t\t\t\t\n\t\t\t\t\t\to.VFX_VARYING_EXPOSUREWEIGHT
      = exposureWeight;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\t\t#if USE_SOFT_PARTICLE
      && defined(VFX_VARYING_INVSOFTPARTICLEFADEDISTANCE)\n\t\t\t\t\t\tfloat invSoftParticlesFadeDistance
      = (float)0;\n\t\t\t\t\t\t{\n\t\t\t\t\t\t    \n\t\t\t\t\t\t    invSoftParticlesFadeDistance
      = (float)2.5;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\to.VFX_VARYING_INVSOFTPARTICLEFADEDISTANCE
      = invSoftParticlesFadeDistance;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\t\t#if
      USE_ALPHA_TEST && defined(VFX_VARYING_ALPHATHRESHOLD)\n\t\t\t\t\t\t\n\t\t\t\t\t\to.VFX_VARYING_ALPHATHRESHOLD
      = alphaThreshold;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\t\t#if USE_UV_SCALE_BIAS\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\to.VFX_VARYING_UV.xy
      = o.VFX_VARYING_UV.xy * uvScale + uvBias;\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\t\t#if
      defined(VFX_VARYING_POSWS)\n\t\t\t\t\t\to.VFX_VARYING_POSWS = TransformPositionVFXToWorld(vPos);\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t#if
      USE_FLIPBOOK\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\to.VFX_VARYING_FLIPBOOKSIZE
      = flipBookSize;\n\t\t\t\to.VFX_VARYING_INVFLIPBOOKSIZE = invFlipBookSize;\n\t\t\t\to.VFX_VARYING_TEXINDEX
      = texIndex;\n\t\t\t\t#endif\n\t\t\t\n\t\t\t\t\n\t\t\t\n\t\t\t\treturn o;\n\t\t\t}\n\t\t\t\n\t\t\t#include
      \"Packages/com.unity.visualeffectgraph/Shaders/VFXCommonOutput.cginc\"\n\t\t\t\n\t\t\tfloat3
      VFXCubeGetLocalNormal(VFX_VARYING_PS_INPUTS i)\n\t\t\t{\n\t\t\t#ifdef VFX_VARYING_OFFSETS\n\t\t\t\t//float3
      s = i.VFX_VARYING_OFFSETS > 0 ? 1.0f : -1.0f;\n\t\t\t\t//return s * (step(1.0f,s
      * i.VFX_VARYING_OFFSETS + 1e-5));\n\t\t\t\treturn int3(i.VFX_VARYING_OFFSETS
      * 1.00001f); // cast uses round_z\n\t\t\t#else\n\t\t\t\treturn 0.0f;\n\t\t\t#endif\n\t\t\t}\n\t\t\t\n\t\t\tfloat3
      VFXCubeTransformNormalTS(float3 faceNormal,float3 normal)\n\t\t\t{\n\t\t\t\tfloat3x3
      tbn = float3x3(faceNormal.zyx,faceNormal.xzy,faceNormal.xyz);\n\t\t\t\treturn
      mul(tbn,normal);\n\t\t\t}\n\t\t\t\n\t\t\tfloat3 VFXCubeTransformNormalTS(VFX_VARYING_PS_INPUTS
      i,float3 normal,bool frontFace = true)\n\t\t\t{\n\t\t\t#if defined(VFX_VARYING_OFFSETS)
      && defined(VFX_VARYING_FACEID)\n\t\t\t\tfloat3x3 tbn;\n\t\t\t\tfloat3 faceNormal
      = VFXCubeGetLocalNormal(i);\n\t\t\t\tif (i.VFX_VARYING_FACEID == 0)\n\t\t\t\t\ttbn
      = float3x3(-faceNormal.zxy,faceNormal.yzx * faceNormal.yzx,faceNormal.xyz);\n\t\t\t\telse
      if (i.VFX_VARYING_FACEID == 1)\n\t\t\t\t\ttbn = float3x3(faceNormal.yxz, faceNormal.xzy,
      float3(0, 1, 0));\n\t\t\t\telse\n\t\t\t\t\ttbn = float3x3(faceNormal.yzx, float3(0,1,0),faceNormal.xyz);\n\t\t\t#ifdef
      USE_DOUBLE_SIDED\n\t\t\t\tfloat multiplier = frontFace ? 1.0f : -1.0f;\n\t\t\t\ttbn[0]
      *= multiplier;\n\t\t\t\ttbn[2] *= multiplier;\n\t\t\t#endif\n\t\t\t\treturn
      mul(tbn, normal);\n\t\t\t#else\n\t\t\t\treturn normal;\n\t\t\t#endif\n\t\t\t}\n\t\t\t\n\t\t\tfloat3
      VFXCubeTransformNormalWS(VFX_VARYING_PS_INPUTS i,float3 normal)\n\t\t\t{\n\t\t\t#if
      defined(VFX_VARYING_ROTX) && defined(VFX_VARYING_ROTY)\n\t\t\t\tfloat3x3 rot
      = float3x3(i.rotX,i.rotY,cross(i.rotX,i.rotY));\n\t\t\t\treturn mul(rot,normal);\n\t\t\t#else\n\t\t\t\treturn
      normal;\n\t\t\t#endif\n\t\t\t}\n\t\t\t\n\t\t\tfloat2 VFXCubeGetUV(VFX_VARYING_PS_INPUTS
      i) \n\t\t\t{\n\t\t\t#if defined(VFX_VARYING_OFFSETS) && defined(VFX_VARYING_FACEID)\n\t\t\t\tfloat2
      uv;\n\t\t\t\tif (i.VFX_VARYING_FACEID == 0)\n\t\t\t\t\tuv = i.VFX_VARYING_OFFSETS.xy
      * float2(-i.VFX_VARYING_OFFSETS.z,1);\n\t\t\t\telse if (i.VFX_VARYING_FACEID
      == 1)\n\t\t\t\t\tuv = i.VFX_VARYING_OFFSETS.xz * float2(i.VFX_VARYING_OFFSETS.y,1);\n\t\t\t\telse\n\t\t\t\t\tuv
      = i.VFX_VARYING_OFFSETS.zy * float2(i.VFX_VARYING_OFFSETS.x,1);\n\t\t\t\treturn
      uv * 0.5f + 0.5f;\n\t\t\t#else\n\t\t\t\treturn 0.0f;\n\t\t\t#endif\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t#pragma
      fragment frag\n\t\t\tps_output frag(ps_input i)\n\t\t\t{\n\t\t\t\tps_output
      o = (ps_output)0;\n\t\t\t\tVFXTransformPSInputs(i);\n\t\t\t\t\n\t\t\t\to.color
      = VFXGetFragmentColor(i);\n\t\t\t\to.color *= VFXGetTextureColorWithProceduralUV(VFX_SAMPLER(mainTexture),i,VFXCubeGetUV(i));\n\t\t\t\to.color
      = VFXApplyFog(o.color,i);\n\t\t\t\tVFXClipFragmentColor(o.color.a,i);\n\t\t\t\treturn
      o;\n\t\t\t}\n\t\t\tENDHLSL\n\t\t}\n\t\t\n\n\t\t\n\t}\n}\n"
  m_Infos:
    m_Expressions:
      m_Expressions:
      - op: 1
        valueIndex: 0
        data[0]: -1
        data[1]: -1
        data[2]: -1
        data[3]: 6
      - op: 1
        valueIndex: 1
        data[0]: -1
        data[1]: -1
        data[2]: -1
        data[3]: 6
      - op: 8
        valueIndex: 2
        data[0]: -1
        data[1]: -1
        data[2]: -1
        data[3]: -1
      - op: 1
        valueIndex: 3
        data[0]: -1
        data[1]: -1
        data[2]: -1
        data[3]: 6
      - op: 62
        valueIndex: 4
        data[0]: 0
        data[1]: 2
        data[2]: -1
        data[3]: 6
      - op: 62
        valueIndex: 5
        data[0]: 1
        data[1]: 2
        data[2]: -1
        data[3]: 6
      - op: 62
        valueIndex: 6
        data[0]: 3
        data[1]: 2
        data[2]: -1
        data[3]: 6
      - op: 1
        valueIndex: 7
        data[0]: -1
        data[1]: -1
        data[2]: -1
        data[3]: 1
      - op: 1
        valueIndex: 8
        data[0]: -1
        data[1]: -1
        data[2]: -1
        data[3]: 1
      - op: 1
        valueIndex: 9
        data[0]: -1
        data[1]: -1
        data[2]: -1
        data[3]: 13
      - op: 1
        valueIndex: 10
        data[0]: -1
        data[1]: -1
        data[2]: -1
        data[3]: 13
      - op: 1
        valueIndex: 11
        data[0]: -1
        data[1]: -1
        data[2]: -1
        data[3]: 3
      - op: 10
        valueIndex: 14
        data[0]: -1
        data[1]: -1
        data[2]: -1
        data[3]: -1
      - op: 1
        valueIndex: 30
        data[0]: -1
        data[1]: -1
        data[2]: -1
        data[3]: 13
      - op: 1
        valueIndex: 31
        data[0]: -1
        data[1]: -1
        data[2]: -1
        data[3]: 14
      - op: 1
        valueIndex: 32
        data[0]: -1
        data[1]: -1
        data[2]: -1
        data[3]: 13
      - op: 1
        valueIndex: 33
        data[0]: -1
        data[1]: -1
        data[2]: -1
        data[3]: 3
      - op: 56
        valueIndex: 36
        data[0]: 10
        data[1]: -1
        data[2]: -1
        data[3]: 0
      - op: 56
        valueIndex: 40
        data[0]: 15
        data[1]: -1
        data[2]: -1
        data[3]: 1
      - op: 56
        valueIndex: 44
        data[0]: 13
        data[1]: -1
        data[2]: -1
        data[3]: 2
      - op: 57
        valueIndex: 48
        data[0]: 14
        data[1]: -1
        data[2]: -1
        data[3]: 0
      - op: 56
        valueIndex: 49
        data[0]: 9
        data[1]: -1
        data[2]: -1
        data[3]: 3
      - op: 6
        valueIndex: 53
        data[0]: -1
        data[1]: -1
        data[2]: -1
        data[3]: -1
      - op: 1
        valueIndex: 54
        data[0]: -1
        data[1]: -1
        data[2]: -1
        data[3]: 2
      - op: 1
        valueIndex: 56
        data[0]: -1
        data[1]: -1
        data[2]: -1
        data[3]: 1
      - op: 1
        valueIndex: 57
        data[0]: -1
        data[1]: -1
        data[2]: -1
        data[3]: 1
      - op: 1
        valueIndex: 58
        data[0]: -1
        data[1]: -1
        data[2]: -1
        data[3]: 12
      - op: 1
        valueIndex: 74
        data[0]: -1
        data[1]: -1
        data[2]: -1
        data[3]: 1
      - op: 1
        valueIndex: 75
        data[0]: -1
        data[1]: -1
        data[2]: -1
        data[3]: 1
      - op: 1
        valueIndex: 76
        data[0]: -1
        data[1]: -1
        data[2]: -1
        data[3]: 1
      - op: 43
        valueIndex: 77
        data[0]: 12
        data[1]: 16
        data[2]: -1
        data[3]: -1
      - op: 43
        valueIndex: 80
        data[0]: 12
        data[1]: 11
        data[2]: -1
        data[3]: -1
      - op: 1
        valueIndex: 83
        data[0]: -1
        data[1]: -1
        data[2]: -1
        data[3]: 3
      - op: 1
        valueIndex: 86
        data[0]: -1
        data[1]: -1
        data[2]: -1
        data[3]: 3
      - op: 1
        valueIndex: 89
        data[0]: -1
        data[1]: -1
        data[2]: -1
        data[3]: 2
      - op: 1
        valueIndex: 91
        data[0]: -1
        data[1]: -1
        data[2]: -1
        data[3]: 6
      - op: 1
        valueIndex: 92
        data[0]: -1
        data[1]: -1
        data[2]: -1
        data[3]: 7
      m_NeedsLocalToWorld: 1
      m_NeedsWorldToLocal: 1
      m_NeededMainCameraBuffers: 0
    m_PropertySheet:
      m_Float:
        m_Array:
        - m_ExpressionIndex: 7
          m_Value: 0.4
        - m_ExpressionIndex: 8
          m_Value: -0.2
        - m_ExpressionIndex: 24
          m_Value: 1
        - m_ExpressionIndex: 25
          m_Value: 0.5
        - m_ExpressionIndex: 27
          m_Value: 2.5
        - m_ExpressionIndex: 28
          m_Value: 0.8
        - m_ExpressionIndex: 29
          m_Value: 0.1
      m_Vector2f:
        m_Array:
        - m_ExpressionIndex: 23
          m_Value: {x: 128, y: 128}
        - m_ExpressionIndex: 34
          m_Value: {x: 0, y: 0}
      m_Vector3f:
        m_Array:
        - m_ExpressionIndex: 11
          m_Value: {x: -3.333, y: -3.333, z: -3.333}
        - m_ExpressionIndex: 16
          m_Value: {x: 3.333, y: 3.333, z: 3.333}
        - m_ExpressionIndex: 32
          m_Value: {x: 0.5, y: 0.5, z: 0.5}
        - m_ExpressionIndex: 33
          m_Value: {x: 0, y: 0, z: 0}
      m_Vector4f:
        m_Array: []
      m_Uint:
        m_Array:
        - m_ExpressionIndex: 0
          m_Value: 2
        - m_ExpressionIndex: 1
          m_Value: 1
        - m_ExpressionIndex: 3
          m_Value: 0
        - m_ExpressionIndex: 35
          m_Value: 3
      m_Int:
        m_Array: []
      m_Matrix4x4f:
        m_Array:
        - m_ExpressionIndex: 26
          m_Value:
            e00: 1
            e01: 0
            e02: 0
            e03: 0
            e10: 0
            e11: 1
            e12: 0
            e13: 0
            e20: 0
            e21: 0
            e22: 1
            e23: 0
            e30: 0
            e31: 0
            e32: 0
            e33: 1
      m_AnimationCurve:
        m_Array:
        - m_ExpressionIndex: 9
          m_Value:
            serializedVersion: 2
            m_Curve:
            - serializedVersion: 3
              time: 0
              value: 0
              inSlope: 0
              outSlope: 0
              tangentMode: 0
              weightedMode: 0
              inWeight: 0
              outWeight: 0
            - serializedVersion: 3
              time: 0.25
              value: 0.25
              inSlope: 0
              outSlope: 0
              tangentMode: 0
              weightedMode: 0
              inWeight: 0
              outWeight: 0
            - serializedVersion: 3
              time: 1
              value: 0
              inSlope: 0
              outSlope: 0
              tangentMode: 0
              weightedMode: 0
              inWeight: 0
              outWeight: 0
            m_PreInfinity: 2
            m_PostInfinity: 2
            m_RotationOrder: 4
        - m_ExpressionIndex: 10
          m_Value:
            serializedVersion: 2
            m_Curve:
            - serializedVersion: 3
              time: 0
              value: 0
              inSlope: 0
              outSlope: 0
              tangentMode: 0
              weightedMode: 0
              inWeight: 0
              outWeight: 0
            - serializedVersion: 3
              time: 0.25
              value: 0.25
              inSlope: 0
              outSlope: 0
              tangentMode: 0
              weightedMode: 0
              inWeight: 0
              outWeight: 0
            - serializedVersion: 3
              time: 1
              value: 0
              inSlope: 0
              outSlope: 0
              tangentMode: 0
              weightedMode: 0
              inWeight: 0
              outWeight: 0
            m_PreInfinity: 2
            m_PostInfinity: 2
            m_RotationOrder: 4
        - m_ExpressionIndex: 13
          m_Value:
            serializedVersion: 2
            m_Curve:
            - serializedVersion: 3
              time: 0
              value: 0
              inSlope: 0
              outSlope: 0
              tangentMode: 0
              weightedMode: 0
              inWeight: 0
              outWeight: 0
            - serializedVersion: 3
              time: 0.25
              value: 0.25
              inSlope: 0
              outSlope: 0
              tangentMode: 0
              weightedMode: 0
              inWeight: 0
              outWeight: 0
            - serializedVersion: 3
              time: 1
              value: 0
              inSlope: 0
              outSlope: 0
              tangentMode: 0
              weightedMode: 0
              inWeight: 0
              outWeight: 0
            m_PreInfinity: 2
            m_PostInfinity: 2
            m_RotationOrder: 4
        - m_ExpressionIndex: 15
          m_Value:
            serializedVersion: 2
            m_Curve:
            - serializedVersion: 3
              time: 0
              value: 0
              inSlope: 2
              outSlope: 2
              tangentMode: 0
              weightedMode: 0
              inWeight: 0
              outWeight: 0
            - serializedVersion: 3
              time: 0.82004786
              value: 1.0064669
              inSlope: -0.037681904
              outSlope: -0.037681904
              tangentMode: 0
              weightedMode: 0
              inWeight: 0
              outWeight: 0
            - serializedVersion: 3
              time: 1.0041809
              value: 0
              inSlope: -1.399947
              outSlope: -1.399947
              tangentMode: 0
              weightedMode: 0
              inWeight: 0
              outWeight: 0
            m_PreInfinity: 2
            m_PostInfinity: 2
            m_RotationOrder: 4
      m_Gradient:
        m_Array:
        - m_ExpressionIndex: 14
          m_Value:
            serializedVersion: 2
            key0: {r: 1, g: 1, b: 1, a: 1}
            key1: {r: 1, g: 1, b: 1, a: 0.9577465}
            key2: {r: 0, g: 0, b: 0, a: 0}
            key3: {r: 0, g: 0, b: 0, a: 0}
            key4: {r: 0, g: 0, b: 0, a: 0}
            key5: {r: 0, g: 0, b: 0, a: 0}
            key6: {r: 0, g: 0, b: 0, a: 0}
            key7: {r: 0, g: 0, b: 0, a: 0}
            ctime0: 0
            ctime1: 65535
            ctime2: 0
            ctime3: 0
            ctime4: 0
            ctime5: 0
            ctime6: 0
            ctime7: 0
            atime0: 6361
            atime1: 35081
            atime2: 65535
            atime3: 0
            atime4: 0
            atime5: 0
            atime6: 0
            atime7: 0
            m_Mode: 0
            m_NumColorKeys: 2
            m_NumAlphaKeys: 3
      m_NamedObject:
        m_Array:
        - m_ExpressionIndex: 36
          m_Value: {fileID: 2800000, guid: 23ec937fed14c2f498d099f62ed33e7c, type: 3}
      m_Bool:
        m_Array: []
    m_ExposedExpressions: []
    m_Buffers:
    - type: 1
      size: 2432
      layout:
      - name: velocity
        type: 3
        offset:
          bucket: 0
          structure: 12
          element: 0
      - name: age
        type: 1
        offset:
          bucket: 0
          structure: 12
          element: 3
      - name: position
        type: 3
        offset:
          bucket: 0
          structure: 12
          element: 4
      - name: angleX
        type: 1
        offset:
          bucket: 0
          structure: 12
          element: 7
      - name: angleY
        type: 1
        offset:
          bucket: 0
          structure: 12
          element: 8
      - name: angleZ
        type: 1
        offset:
          bucket: 0
          structure: 12
          element: 9
      - name: alive
        type: 17
        offset:
          bucket: 0
          structure: 12
          element: 10
      - name: seed
        type: 6
        offset:
          bucket: 1536
          structure: 1
          element: 0
      - name: lifetime
        type: 1
        offset:
          bucket: 1664
          structure: 1
          element: 0
      - name: color
        type: 3
        offset:
          bucket: 1792
          structure: 4
          element: 0
      - name: size
        type: 1
        offset:
          bucket: 2304
          structure: 1
          element: 0
      capacity: 128
      stride: 4
    - type: 1
      size: 2432
      layout:
      - name: velocity
        type: 3
        offset:
          bucket: 0
          structure: 12
          element: 0
      - name: age
        type: 1
        offset:
          bucket: 0
          structure: 12
          element: 3
      - name: position
        type: 3
        offset:
          bucket: 0
          structure: 12
          element: 4
      - name: angleX
        type: 1
        offset:
          bucket: 0
          structure: 12
          element: 7
      - name: angleY
        type: 1
        offset:
          bucket: 0
          structure: 12
          element: 8
      - name: angleZ
        type: 1
        offset:
          bucket: 0
          structure: 12
          element: 9
      - name: alive
        type: 17
        offset:
          bucket: 0
          structure: 12
          element: 10
      - name: seed
        type: 6
        offset:
          bucket: 1536
          structure: 1
          element: 0
      - name: lifetime
        type: 1
        offset:
          bucket: 1664
          structure: 1
          element: 0
      - name: color
        type: 3
        offset:
          bucket: 1792
          structure: 4
          element: 0
      - name: size
        type: 1
        offset:
          bucket: 2304
          structure: 1
          element: 0
      capacity: 128
      stride: 4
    - type: 1
      size: 12
      layout:
      - name: velocity
        type: 3
        offset:
          bucket: 0
          structure: 12
          element: 0
      - name: spawnCount
        type: 1
        offset:
          bucket: 0
          structure: 12
          element: 3
      - name: position
        type: 3
        offset:
          bucket: 0
          structure: 12
          element: 4
      - name: color
        type: 3
        offset:
          bucket: 0
          structure: 12
          element: 8
      capacity: 1
      stride: 4
    - type: 4
      size: 128
      layout: []
      capacity: 0
      stride: 4
    - type: 1
      size: 1
      layout: []
      capacity: 0
      stride: 4
    m_TemporaryBuffers: []
    m_CPUBuffers:
    - capacity: 1
      stride: 10
      layout:
      - name: spawnCount
        type: 1
        offset:
          bucket: 0
          structure: 10
          element: 0
      - name: velocity
        type: 3
        offset:
          bucket: 0
          structure: 10
          element: 1
      - name: position
        type: 3
        offset:
          bucket: 0
          structure: 10
          element: 4
      - name: color
        type: 3
        offset:
          bucket: 0
          structure: 10
          element: 7
      initialData:
        data: 000000000000000000000000000000000000000000000000000000000000803f0000803f0000803f
    - capacity: 1
      stride: 10
      layout:
      - name: spawnCount
        type: 1
        offset:
          bucket: 0
          structure: 10
          element: 0
      - name: velocity
        type: 3
        offset:
          bucket: 0
          structure: 10
          element: 1
      - name: position
        type: 3
        offset:
          bucket: 0
          structure: 10
          element: 4
      - name: color
        type: 3
        offset:
          bucket: 0
          structure: 10
          element: 7
      initialData:
        data: 000000000000000000000000000000000000000000000000000000000000803f0000803f0000803f
    m_Events:
    - name: OnPlay
      playSystems: 
      stopSystems: 
    - name: OnStop
      playSystems: 
      stopSystems: 
    - name: OnCollision
      playSystems: 00000000
      stopSystems: 
    m_RuntimeVersion: 10
    m_RendererSettings:
      motionVectorGenerationMode: 0
      shadowCastingMode: 0
      receiveShadows: 0
      reflectionProbeUsage: 0
      lightProbeUsage: 0
    m_CullingFlags: 3
    m_UpdateMode: 0
    m_PreWarmDeltaTime: 0.05
    m_PreWarmStepCount: 0
  m_Systems:
  - type: 0
    flags: 0
    capacity: 0
    layer: 4294967295
    buffers:
    - nameId: spawner_output
      index: 1
    values: []
    tasks:
    - type: 268435457
      buffers: []
      temporaryBuffers: []
      values:
      - nameId: Count
        index: 23
      - nameId: Delay
        index: 34
      params: []
      processor: {fileID: 0}
      shaderSourceIndex: -1
  - type: 1
    flags: 1
    capacity: 128
    layer: 4294967295
    buffers:
    - nameId: attributeBuffer
      index: 0
    - nameId: sourceAttributeBuffer
      index: 2
    - nameId: deadList
      index: 3
    - nameId: deadListCount
      index: 4
    - nameId: spawner_input
      index: 1
    values:
    - nameId: bounds_center
      index: 33
    - nameId: bounds_size
      index: 32
    tasks:
    - type: 536870912
      buffers:
      - nameId: attributeBuffer
        index: 0
      - nameId: deadListIn
        index: 3
      - nameId: deadListCount
        index: 4
      - nameId: sourceAttributeBuffer
        index: 2
      temporaryBuffers: []
      values:
      - nameId: Min_a
        index: 31
      - nameId: Max_a
        index: 30
      - nameId: uniform_d
        index: 6
      - nameId: uniform_e
        index: 5
      - nameId: uniform_f
        index: 4
      params:
      - nameId: bounds_center
        index: 33
      - nameId: bounds_size
        index: 32
      processor: {fileID: 0}
      shaderSourceIndex: 0
    - type: 805306368
      buffers:
      - nameId: attributeBuffer
        index: 0
      - nameId: deadListOut
        index: 3
      temporaryBuffers: []
      values:
      - nameId: deltaTime_a
        index: 22
      - nameId: Size_b
        index: 18
      - nameId: Angle_x_c
        index: 21
      - nameId: Angle_y_c
        index: 17
      - nameId: Angle_z_c
        index: 19
      params: []
      processor: {fileID: 0}
      shaderSourceIndex: 1
    - type: 1073741827
      buffers:
      - nameId: attributeBuffer
        index: 0
      temporaryBuffers: []
      values:
      - nameId: gradient_b
        index: 20
      - nameId: mainTexture
        index: 36
      params:
      - nameId: sortPriority
        index: 0
      processor: {fileID: 0}
      shaderSourceIndex: 2
--- !u!114 &8926484042661614688
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 9207a95457a3f994581249dbe0a3409d, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_Parent: {fileID: 114350483966674976}
  m_Children: []
  m_UIPosition: {x: 567, y: 925}
  m_UICollapsed: 0
  m_UISuperCollapsed: 0
  m_InputSlots: []
  m_OutputSlots: []
  m_Label: 
  m_Data: {fileID: 0}
  m_InputFlowSlot:
  - link: []
  - link: []
  m_OutputFlowSlot:
  - link: []
  m_Subgraph: {fileID: 8926484042661614526, guid: a28fabd60e9f51840bb363516a0e7e88,
    type: 3}
  m_InputFlowNames:
  - OnStop
  - OnCollision
